# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    strategy:
      matrix:
        os: ['macos-latest','ubuntu-latest','windows-latest']
        arch: [x64, arm64]
        include:
        - os: ubuntu-latest
          arch: armv7l
          experimental: true
      fail-fast: false
 
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      # Setup node
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
          registry-url: 'https://npm.pkg.github.com'       
     # Cache system  
      - name: Cache
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-     

#      - name: Submodule
#        uses: Mushus/checkout-submodule@v1.0.1
#        with:
#          # A path to execute git operation
#          #basePath: # optional, default is .
#          # A path of submodule directory
#          submodulePath: ./packages/tightcnc/server
#          # A identifier secret key to used checkout the submodule
#          identifierFile: ${{ secrets.DEPLOY_KEY_TIGHTCNC }}

      - name: Install
        run: |
          npm install --global yarn lerna
          lerna bootstrap --include-dependencies
      
      - name: Publish Packages
        run: |
          lerna run --scope "@dianlight/*" --include-dependencies build --stream --concurrency 1
          lerna publish --no-git-tag-version --no-push from-package --registry https://npm.pkg.github.com -y
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
        
      - name: Build (spa)
        if: ${{ startsWith(runner.os, 'macos') }}
        run: |
          echo ${runner.os} ${runner}
          lerna run --scope gcodego --include-dependencies build --stream
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  

      - name: Upload artifact (spa)
        uses: actions/upload-artifact@v2
        if: ${{ startsWith(runner.os, 'macos') }}
        with:
          name: nightly_spa
          path: |
            packages/gcodego/gcodego/dist/spa

      - name: Build (electron)
        run: |
          lerna run --scope gcodego --include-dependencies build:electron --stream
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  

      - name: Upload artifact (electron)
        uses: actions/upload-artifact@v2
        with:
          name: nightly_${{ runner.os }}_${{ matrix.arch }}
          path: |
            packages/gcodego/gcodego/dist/electron/Packaged/**/*.dmg
            packages/gcodego/gcodego/dist/electron/Packaged/**/*.AppImage
            packages/gcodego/gcodego/dist/electron/Packaged/**/*.exe


      #- name: Deploy
      #  uses: JamesIves/github-pages-deploy-action@master
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #    BASE_BRANCH: master
      #    BRANCH: gh-pages
      #    FOLDER: dist/spa
#            - name: Deploy ðŸš€
#              uses: JamesIves/github-pages-deploy-action@4.1.4
#              with:
#                branch: gh-pages # The branch the action should deploy to.
#                folder: build # The folder the action should deploy.
     
    
